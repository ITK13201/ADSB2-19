とりあえずこの状態で100回くらい実行して全部ハミング距離が0になることは確認しました
どのくらいの確率か分かりませんが失敗することもあるかもしれません
現状NP方式で9回読んでいて、コストは180です
実行時間は僕の環境で0.1～0.3secくらいでした ばらつきがあります
多分改良の余地あり？
コスト・実行時間と成功率がトレードオフになっています、もしこのコードを採用するならその匙加減はリーダーに任せます
バージョンアップに伴い少ない読込数で動作するようになったのでデフォルトのパラメータを変更しました
./test.sh 0 0 0 5 0 0
で実行してください

追記
パラメータの変更をしやすいようにしました。
dec.cの9行目・10行目に
#define N 5
#define M 13
と書かれていると思いますが、Nが読み取りの回数、Mが挿入・削除の修正の為に比較する文字列の長さです
NもMも大きいほどハミング距離を0にできる確率が上がりますが、Nに比例してコスト・実行時間が、Mの2乗に比例して実行時間が大きくなります
Nの値を変更するときは、実行時は./test.sh 0 0 0 N 0 0で実行してください(例えばN=12とする場合は./test.sh 0 0 0 12 0 0)
思いつく限りの高速化や成功率が上がるような処理の変更は施しました

Ver.1.1について
生成するDNAの大きさ自体も評価指標に入るとのことなので、大きさを20万にするグループが多数いることを見越して最後の1つにだけ2bit分の情報を持たせることによってDNAの大きさを199999にしました

Ver.1.2について
バグの修正及び更なる高速化・成功率の向上を行いました
修正により、N,Mがもっと小さくても耐えられるようになりました
N=7,M=18で100回実行して全てハミング距離が0になることを確認しました

Ver.1.3について
正しいかどうかの判定に偶奇の情報も用いるようにしました
N=6,M=15で100回実行して全てハミング距離が0になることを確認しました
N=5で99%くらいの成功率だと思います　N=4でも結構耐えます
試してみたらN=5でも100回実行して全部0になったのでデフォルトはN=5,M=13にしています
